package edu.grinnell.csc207.soundsofsorting.sorts;

import java.util.List;
import java.util.Random;

import edu.grinnell.csc207.soundsofsorting.sortevents.SortEvent;

/**
 * A collection of sorting algorithms.
 */
public class Sorts {
    /**
     * Swaps indices <code>i</code> and <code>j</code> of array <code>arr</code>.
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i   the first index to swap
     * @param j   the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /**
     * Sorts the array according to the bubble sort algorithm:
     * 
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> bubbleSort(T[] arr) {
        
        for (int i = 0; i < arr.length - 1; i++) {
            boolean swapped = false;
            for (int j = 0; j < arr.length - 1 - i; j++) {
                // true when j is of higher order than j+1
                if (arr[j].compareTo(arr[j + 1]) > 0) {
                    swap(arr, j, j + 1);
                    swapped = true;
                }
            }
            // stop walk when whole arr is ordered
            if (!swapped) {
                break;
            }
        }
        return null;
    }

    /**
     * Sorts the array according to the selection sort algorithm:
     * 
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> selectionSort(
            T[] arr) {
        for (int i = 0; i < arr.length; i++) {
            int min_idx = i;
            for (int j = i; j < arr.length; j++) {
                if (arr[min_idx].compareTo(arr[j]) > 0) {
                    min_idx = j;
                }
            }
            swap(arr, i, min_idx);
        }
        return null;
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * 
     * <pre>
     * [ i elements in order | unprocessed ]
     * </pre>
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> insertionSort(
            T[] arr) {
        for (int i = 1; i < arr.length; i++) {
            for (int j = 0; j < i; j++) {
                if (arr[i].compareTo(arr[j]) < 1) {
                    T tmp = arr[i];
                    System.arraycopy(arr, j, arr, j+1, i-j);
                    arr[j] = tmp;
                }
            }
        }
        return null;
    }

    /**
     * Sorts the array according to the merge sort algorithm.
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> mergeSort(
            T[] arr) {
        if (arr == null || arr.length <= 1) return null;
        T[] new_arr = java.util.Arrays.copyOf(arr, arr.length);

        mergeHelper(arr, new_arr, 0, arr.length-1);
        return null;
    }

    public static <T extends Comparable<? super T>> void mergeHelper(
        T[] arr, T[] new_arr, int fst, int lst) {
        if (fst >= lst) return;

        int mid = (fst + lst) / 2;

        mergeHelper(arr, new_arr, fst, mid);
        mergeHelper(arr, new_arr, mid+1, lst);
        sortHelper(arr, new_arr, fst, mid, lst);
    }

    public static <T extends Comparable<? super T>> void sortHelper(
        T[] arr, T[] new_arr, int fst, int mid, int lst) {
        int cur1 = fst;
        int cur2 = mid + 1;
        int newcur = fst;

        if (newcur == lst) return;

        while((cur1 <= mid) && (cur2 <= lst)) {
            if (arr[cur1].compareTo(arr[cur2]) < 0) {
                new_arr[newcur++] = arr[cur1++];
            } else {
                new_arr[newcur++] = arr[cur2++];
            } 
        }

        // catch cursors up after 1 half is fully sorted
        while (cur1 <= mid) {
            new_arr[newcur++] = arr[cur1++];
        }
        while (cur2 <= lst) {
            new_arr[newcur++] = arr[cur2++];
        }

        // write back to old array
        System.arraycopy(new_arr, fst, arr, fst, lst-fst+1);
    }

    /**
     * Sorts the array according to the quick sort algorithm.
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> quickSort(T[] arr) {
        quickSortHelper(arr, 0, arr.length - 1);
        return null;
    }

    public static <T extends Comparable<? super T>> void quickSortHelper(T[] arr, int cur1, int cur2) {
        if (cur1 >= cur2) return;

        int c1 = cur1;
        int c2 = cur2 - 1;

        Random rand = new Random();
        int part = rand.nextInt(cur1, cur2 + 1);

        swap(arr, part, cur2);

        while (c1 <= c2) {
            if (arr[c1].compareTo(arr[cur2]) <= 0) {
                c1++;
            } else {
                swap(arr, c1, c2);
                c2--;
            }
        }

        swap(arr, c1, cur2);  // place pivot in back

        // recurse on both sides
        quickSortHelper(arr, cur1, c1 - 1);
        quickSortHelper(arr, c1 + 1, cur2);
    }


    
}
