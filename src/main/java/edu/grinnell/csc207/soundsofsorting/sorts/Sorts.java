package edu.grinnell.csc207.soundsofsorting.sorts;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

import edu.grinnell.csc207.soundsofsorting.sortevents.CompareEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.CopyEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SortEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SwapEvent;

/**
 * A collection of sorting algorithms.
 */
public class Sorts {
    /**
     * Swaps indices <code>i</code> and <code>j</code> of array <code>arr</code>.
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i   the first index to swap
     * @param j   the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /**
     * Applies events list in order to given array l
     * 
     * @param l
     * @param events
     */
    public static <T> void eventSort(T[] l, List<SortEvent<T>> events) {
        for (SortEvent<T> event : events) {
            event.apply(l);
        }
    }

    /**
     * Sorts the array according to the bubble sort algorithm:
     * 
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> bubbleSort(T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();
        System.out.println("bubbleSort called with arr = " + Arrays.toString(arr));
        System.out.println("arr length = " + arr.length);
        
        for (int i = 0; i < arr.length - 1; i++) {
            boolean swapped = false;
            for (int j = 0; j < arr.length - 1 - i; j++) {
                events.add(new CompareEvent<>(j, j+1));
                System.out.println("Compare_Event");
                if (arr[j].compareTo(arr[j + 1]) > 0) {
                    swap(arr, j, j + 1);
                    events.add(new SwapEvent<>(j, j+1));
                    System.out.println("Swap_Event");
                    swapped = true;
                }
            }
            if (!swapped) {
                break;
            }
        }
        System.out.println(events);
        return events;
    }

    /**
     * Sorts the array according to the selection sort algorithm:
     * 
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> selectionSort(
            T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();

        for (int i = 0; i < arr.length; i++) {
            int min_idx = i;
            for (int j = i; j < arr.length; j++) {
                events.add(new CompareEvent<>(min_idx, j));
                if (arr[min_idx].compareTo(arr[j]) > 0) {
                    min_idx = j;
                }
            }
            events.add(new SwapEvent<>(i, min_idx));
            swap(arr, i, min_idx);
        }
        return events;
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * 
     * <pre>
     * [ i elements in order | unprocessed ]
     * </pre>
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> insertionSort(
            T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();

        for (int i = 1; i < arr.length; i++) {
            for (int j = 0; j < i; j++) {
                events.add(new CompareEvent<>(i, j));
                if (arr[i].compareTo(arr[j]) < 1) {
                    events.add(new CopyEvent<>(j, arr[j]));
                    T tmp = arr[i];
                    System.arraycopy(arr, j, arr, j + 1, i - j);
                    arr[j] = tmp;
                }
            }
        }
        return events;
    }

    /**
     * Sorts the array according to the merge sort algorithm.
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> mergeSort(
            T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();

        if (arr == null || arr.length <= 1)
            return events;
        T[] new_arr = java.util.Arrays.copyOf(arr, arr.length);

        events = mergeHelper(arr, new_arr, 0, arr.length - 1);
        return events;
    }

    public static <T extends Comparable<? super T>> List<SortEvent<T>> mergeHelper(
            T[] arr, T[] new_arr, int fst, int lst) {
        List<SortEvent<T>> events = new ArrayList<>();

        if (fst >= lst)
            return events;

        int mid = (fst + lst) / 2;

        events.addAll(mergeHelper(arr, new_arr, fst, mid));
        events.addAll(mergeHelper(arr, new_arr, mid + 1, lst));
        events.addAll(mergeSortHelper(arr, new_arr, fst, mid, lst));
        return events;
    }

    public static <T extends Comparable<? super T>> List<SortEvent<T>> mergeSortHelper(
            T[] arr, T[] new_arr, int fst, int mid, int lst) {
        List<SortEvent<T>> events = new ArrayList<>();

        int cur1 = fst;
        int cur2 = mid + 1;
        int newcur = fst;

        if (newcur == lst)
            return events;

        while ((cur1 <= mid) && (cur2 <= lst)) {
            events.add(new CompareEvent<>(cur1, cur2));
            if (arr[cur1].compareTo(arr[cur2]) < 0) {
                events.add(new CopyEvent<>(cur1, arr[cur1]));
                new_arr[newcur++] = arr[cur1++];
            } else {
                events.add(new CopyEvent<>(cur2, arr[cur2]));
                new_arr[newcur++] = arr[cur2++];
            }
        }

        // catch cursors up after 1 half is fully sorted
        while (cur1 <= mid) {
            events.add(new CopyEvent<>(cur1, arr[cur1]));
            new_arr[newcur++] = arr[cur1++];
        }
        while (cur2 <= lst) {
            events.add(new CopyEvent<>(cur2, arr[cur2]));
            new_arr[newcur++] = arr[cur2++];
        }

        // write back to old array
        System.arraycopy(new_arr, fst, arr, fst, lst - fst + 1);
        return events;
    }

    /**
     * Sorts the array according to the quick sort algorithm.
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> quickSort(T[] arr) {
        List<SortEvent<T>> events;

        events = quickSortHelper(arr, 0, arr.length - 1);
        return events;
    }

    public static <T extends Comparable<? super T>> List<SortEvent<T>> quickSortHelper(T[] arr, int cur1, int cur2) {
        List<SortEvent<T>> events = new ArrayList<>();
        
        if (cur1 >= cur2)
            return events;

        int c1 = cur1;
        int c2 = cur2 - 1;

        Random rand = new Random();
        int part = rand.nextInt(cur1, cur2 + 1);

        events.add(new SwapEvent<>(part, cur2));
        swap(arr, part, cur2);

        while (c1 <= c2) {
            events.add(new CompareEvent<>(c1, cur2));
            if (arr[c1].compareTo(arr[cur2]) <= 0) {
                c1++;
            } else {
                events.add(new SwapEvent<>(c1, c2));
                swap(arr, c1, c2);
                c2--;
            }
        }
        events.add(new SwapEvent<>(c1, cur2));
        swap(arr, c1, cur2); // place pivot in back

        // recurse on both sides
        events.addAll(quickSortHelper(arr, cur1, c1 - 1));
        events.addAll(quickSortHelper(arr, c1 + 1, cur2));
        return events;
    }

    /**
     * Sorts the array according to the heapsort algorithm.
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> heapSort(T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();

        int len = arr.length;
        events.addAll(buildHeap(arr));

        for (int i = len - 1; i > 0; i--) {
            events.add(new SwapEvent<>(0, i));
            swap(arr, 0, i);
            events.addAll(heapify(arr, 0, i));
        }
        
        return events;
    }

    public static <T extends Comparable<? super T>> List<SortEvent<T>> heapify(T[] arr, int parent, int len) {
        List<SortEvent<T>> events = new ArrayList<>();

        int l_child = 2 * parent + 1;
        int r_child = 2 * parent + 2;
        int max = parent;

        if ((l_child < len) && (arr[l_child].compareTo(arr[max]) > 0)) {
            events.add(new CompareEvent<>(l_child, max));
            max = l_child;
        } 
        if ((r_child < len) && (arr[r_child].compareTo(arr[max]) > 0)) {
            events.add(new CompareEvent<>(r_child, max));
            max = r_child;
        }
        if (max != parent) {
            events.add(new SwapEvent<>(parent, max));
            swap(arr, parent, max);
            events.addAll(heapify(arr, max, len));
        }
        return events;
    }

    public static <T extends Comparable<? super T>> List<SortEvent<T>> buildHeap(T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();
        int len = arr.length;
        
        for (int i = (len / 2) - 1; i >= 0; i--) {
            events.addAll(heapify(arr, i, len));
        }

        return events;
    }
}
